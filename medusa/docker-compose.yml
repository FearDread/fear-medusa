version: "3.8"
services:
  backend:
    image: ${CONTAINER_RELEASE_IMAGE}
    # Uncomment if you want to build the image on the server itself
    # build:
    #   context: backend/
    #   dockerfile: Dockerfile
    # image: medusa-starter-default:1.0.0
    hostname: "`${MEDUSA_DOMAIN}`"
    container_name: medusa-server-default
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      storage:
        condition: service_started
      meilisearch:
        condition: service_started
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/medusa-store
      REDIS_URL: redis://redis
      NODE_ENV: development
      PORT: 9000
    env_file:
      - .env
    ports:
      - "9000:9000"
    volumes:
      - medusa_data:/app/medusa
      - node_modules:/app/medusa/node_modules
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://0.0.0.0:9000/app || exit 1
      interval: 60s
      timeout: 10s
      start_period: 20s
      retries: 5
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.services.backend.loadbalancer.server.port=9000
      - traefik.http.routers.backend.rule=Host(`${MEDUSA_DOMAIN}`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls.certresolver=${MEDUSA_CERT_RESOLVER}
    networks:
      - traefik
      - medusa_internal
  postgres:
    image: postgres:10.4-alpine
    restart: always
    expose:
      - 5432
    networks:
      - medusa_internal
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: medusa-store
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7.0.7-alpine
    restart: always
    container_name: redis
    expose:
      - 6379
    networks:
      - medusa_internal

## services:#
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: backend:starter
    container_name: medusa-server-default
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/medusa-docker
      REDIS_URL: redis://redis
      NODE_ENV: development
      JWT_SECRET: something
      COOKIE_SECRET: something
      PORT: 9000
    ports:
      - "9000:9000"
    volumes:
      - .:/app/medusa
      - node_modules:/app/medusa/node_modules

  postgres:
    image: postgres:10.4
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: medusa-docker

  redis:
    image: redis
    expose:
      - 6379

volumes:
  node_modules:
